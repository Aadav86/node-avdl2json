// Generated by IcedCoffeeScript 108.0.9
(function() {
  var ArrayType, ArrayValue, Decorator, Enum, Field, Fixed, Identifier, Import, Message, Node, Param, Protocol, Record, String, Type, Union, Value,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Node = (function() {
    function Node(_arg) {
      this.start = _arg.start, this.end = _arg.end, this.decorators = _arg.decorators;
    }

    Node.prototype.is_import = function() {
      return false;
    };

    Node.prototype.is_type_decl = function() {
      return false;
    };

    Node.prototype.is_message = function() {
      return false;
    };

    Node.prototype.decorate = function(out) {
      var d, _i, _len, _ref;
      if (this.decorators != null) {
        _ref = this.decorators;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          d.decorate(out);
        }
      }
      return out;
    };

    return Node;

  })();

  Protocol = (function(_super) {
    __extends(Protocol, _super);

    function Protocol(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name, this.statements = _arg.statements, this.namespace = _arg.namespace;
      Protocol.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Protocol.prototype.get_imports = function() {
      var i, _i, _len, _ref, _results;
      _ref = this.statements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.is_import()) {
          _results.push(i);
        }
      }
      return _results;
    };

    Protocol.prototype.get_type_decls = function() {
      var t, _i, _len, _ref, _results;
      _ref = this.statements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (t.is_type_decl()) {
          _results.push(t);
        }
      }
      return _results;
    };

    Protocol.prototype.get_all_protocols = function() {
      var i;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.get_imports();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(i.protocol);
        }
        return _results;
      }).call(this)).concat([this]);
    };

    Protocol.prototype.get_all_messages = function() {
      var m, _i, _len, _ref, _results;
      _ref = this.statements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        if (m.is_message()) {
          _results.push(m);
        }
      }
      return _results;
    };

    Protocol.prototype.to_json = function() {
      var i, m, out, t, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      out = {
        protocol: this.name.to_json()
      };
      if (this.namespace) {
        out.namespace = this.namespace;
      }
      out.types = [];
      _ref = this.get_all_protocols();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _ref1 = i.get_type_decls();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          t = _ref1[_j];
          out.types.push(t.to_json());
        }
      }
      out.messages = {};
      _ref2 = this.get_all_messages();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        m = _ref2[_k];
        m.to_json(out.messages);
      }
      return out;
    };

    return Protocol;

  })(Node);

  Decorator = (function(_super) {
    __extends(Decorator, _super);

    function Decorator(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.label = _arg.label, this.args = _arg.args;
      Decorator.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Decorator.prototype.decorate = function(out) {
      return out[this.label.to_json()] = this.args.to_json();
    };

    return Decorator;

  })(Node);

  Identifier = (function(_super) {
    __extends(Identifier, _super);

    function Identifier(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name;
      Identifier.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Identifier.prototype.to_json = function() {
      return this.name;
    };

    return Identifier;

  })(Node);

  Enum = (function(_super) {
    __extends(Enum, _super);

    function Enum(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, this.name = _arg.name, decorators = _arg.decorators, this.constants = _arg.constants;
      Enum.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Enum.prototype.is_type_decl = function() {
      return true;
    };

    Enum.prototype.to_json = function() {
      var c;
      return this.decorate({
        type: "enum",
        name: this.name.to_json(),
        symbols: (function() {
          var _i, _len, _ref, _results;
          _ref = this.constants;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(c.to_json());
          }
          return _results;
        }).call(this)
      });
    };

    return Enum;

  })(Node);

  Record = (function(_super) {
    __extends(Record, _super);

    function Record(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, decorators = _arg.decorators, this.name = _arg.name, this.fields = _arg.fields;
      Record.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Record.prototype.is_type_decl = function() {
      return true;
    };

    Record.prototype.to_json = function() {
      var f;
      return this.decorate({
        type: "record",
        name: this.name.to_json(),
        fields: (function() {
          var _i, _len, _ref, _results;
          _ref = this.fields;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            _results.push(f.to_json());
          }
          return _results;
        }).call(this)
      });
    };

    return Record;

  })(Node);

  Field = (function(_super) {
    __extends(Field, _super);

    function Field(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.name = _arg.name;
      Field.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Field.prototype.to_json = function() {
      return {
        type: this.type.to_json(),
        name: this.name.to_json()
      };
    };

    return Field;

  })(Node);

  Type = (function(_super) {
    __extends(Type, _super);

    function Type(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.prim = _arg.prim, this.custom = _arg.custom, this.void_type = _arg.void_type, this.null_type = _arg.null_type;
      Type.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Type.prototype.to_json = function() {
      if (this.prim != null) {
        return this.prim;
      } else if (this.custom != null) {
        return this.custom.to_json();
      } else if (this.null_type != null) {
        return "null";
      } else if (this.void_type) {
        return null;
      }
    };

    return Type;

  })(Node);

  Value = (function(_super) {
    __extends(Value, _super);

    function Value(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.int = _arg.int, this.string = _arg.string, this.bool = _arg.bool, this.null_value = _arg.null_value;
      Value.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Value.prototype.to_json = function() {
      if (this.string != null) {
        return this.string.eval_to_string();
      } else if (this.int != null) {
        return this.int;
      } else if (this.bool != null) {
        return this.bool;
      } else {
        return null;
      }
    };

    return Value;

  })(Node);

  ArrayType = (function(_super) {
    __extends(ArrayType, _super);

    function ArrayType(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type;
      ArrayType.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    ArrayType.prototype.to_json = function() {
      return {
        type: "array",
        items: this.type.to_json()
      };
    };

    return ArrayType;

  })(Node);

  Union = (function(_super) {
    __extends(Union, _super);

    function Union(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, this.types = _arg.types, decorators = _arg.decorators;
      Union.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Union.prototype.is_type_decl = function() {
      return true;
    };

    Union.prototype.to_json = function() {
      var t;
      return this.decorate((function() {
        var _i, _len, _ref, _results;
        _ref = this.types;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(t.to_json());
        }
        return _results;
      }).call(this));
    };

    return Union;

  })(Node);

  Import = (function(_super) {
    __extends(Import, _super);

    function Import(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.path = _arg.path;
      Import.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Import.prototype.is_import = function() {
      return true;
    };

    Import.prototype.set_protocol = function(ast) {
      return this.protocol = ast;
    };

    Import.prototype.get_path = function() {
      return this.path;
    };

    return Import;

  })(Node);

  Message = (function(_super) {
    __extends(Message, _super);

    function Message(_arg) {
      var decorators, end, start;
      start = _arg.start, end = _arg.end, decorators = _arg.decorators, this.name = _arg.name, this.params = _arg.params, this.return_type = _arg.return_type;
      Message.__super__.constructor.call(this, {
        start: start,
        end: end,
        decorators: decorators
      });
    }

    Message.prototype.is_message = function() {
      return true;
    };

    Message.prototype.to_json = function(out) {
      var p;
      out[this.name.to_json()] = {
        request: (function() {
          var _i, _len, _ref, _results;
          _ref = this.params;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(p.to_json());
          }
          return _results;
        }).call(this),
        response: this.return_type.to_json()
      };
      return out;
    };

    return Message;

  })(Node);

  Param = (function(_super) {
    __extends(Param, _super);

    function Param(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.name = _arg.name, this.def = _arg.def;
      Param.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Param.prototype.to_json = function() {
      var out;
      out = {
        name: this.name.to_json(),
        type: this.type.to_json()
      };
      if (this.def != null) {
        out["default"] = this.def.to_json();
      }
      return out;
    };

    return Param;

  })(Node);

  ArrayValue = (function(_super) {
    __extends(ArrayValue, _super);

    function ArrayValue(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.name = _arg.name, this.def = _arg.def;
      ArrayValue.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    return ArrayValue;

  })(Node);

  Fixed = (function(_super) {
    __extends(Fixed, _super);

    function Fixed(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.len = _arg.len;
      Fixed.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    Fixed.prototype.is_type_decl = function() {
      return true;
    };

    return Fixed;

  })(Node);

  String = (function(_super) {
    __extends(String, _super);

    function String(_arg) {
      var end, start;
      start = _arg.start, end = _arg.end, this.type = _arg.type, this.val = _arg.val;
      String.__super__.constructor.call(this, {
        start: start,
        end: end
      });
    }

    String.prototype.eval_to_string = function() {
      return JSON.parse(this.val);
    };

    return String;

  })(Node);

  module.exports = {
    Protocol: Protocol,
    Decorator: Decorator,
    Identifier: Identifier,
    Enum: Enum,
    Record: Record,
    Field: Field,
    Type: Type,
    Value: Value,
    ArrayType: ArrayType,
    Union: Union,
    Import: Import,
    Message: Message,
    Param: Param,
    ArrayValue: ArrayValue,
    Fixed: Fixed,
    String: String
  };

}).call(this);
