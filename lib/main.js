// Generated by IcedCoffeeScript 108.0.9
(function() {
  var Parser, Runner, ast, colors, fs, iced, make_esc, minimist, parser, usage, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  _ref = require('./parser'), parser = _ref.parser, Parser = _ref.Parser;

  minimist = require('minimist');

  make_esc = require('iced-error').make_esc;

  colors = require('colors');

  ast = require('./ast');

  usage = function() {
    return console.error("usage: avd2ljson -i <infile> -o <outfile>");
  };

  Runner = (function() {
    function Runner() {}

    Runner.prototype.parse_argv = function(_arg, cb) {
      var argv, err;
      argv = _arg.argv;
      argv = minimist(argv);
      if (argv.h) {
        usage();
        err = new Error("usage: shown!");
      } else {
        console.log(argv);
        this.outfile = argv.o;
        this.infile = argv.i;
        if (!((this.outfile != null) && (this.infile != null))) {
          err = new Error("need an [-i <infile>] and a [-o <outfile>]");
        }
      }
      return cb(err);
    };

    Runner.prototype.open_infile = function(opts, cb) {
      var dat, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
            funcname: "Runner.open_infile"
          });
          fs.readFile(_this.infile, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return dat = arguments[1];
              };
            })(),
            lineno: 39
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, dat.toString('utf8'));
        };
      })(this));
    };

    Runner.prototype.parse = function(_arg, cb) {
      var dat, e, err, res;
      dat = _arg.dat;
      parser.yy = ast;
      try {
        res = parser.parse(dat);
        console.log(parser.yy.output);
        this.ast = parser.yy.output;
      } catch (_error) {
        e = _error;
        err = new Error("Parse error in: " + this.infile + ": " + e.message);
      }
      return cb(err);
    };

    Runner.prototype.output = function(opts, cb) {
      console.log(this.ast);
      return cb(null);
    };

    Runner.prototype.main = function(_arg, cb) {
      var argv, dat, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      argv = _arg.argv;
      esc = make_esc(cb, "main");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
            funcname: "Runner.main"
          });
          _this.parse_argv({
            argv: argv
          }, esc(__iced_deferrals.defer({
            lineno: 65
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
              funcname: "Runner.main"
            });
            _this.open_infile({}, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return dat = arguments[0];
                };
              })(),
              lineno: 66
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
                funcname: "Runner.main"
              });
              _this.parse({
                dat: dat
              }, esc(__iced_deferrals.defer({
                lineno: 67
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
                  funcname: "Runner.main"
                });
                _this.output({}, esc(__iced_deferrals.defer({
                  lineno: 68
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    return Runner;

  })();

  exports.main = function() {
    var err, rc, runner, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    runner = new Runner;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
          funcname: "main"
        });
        runner.main({
          argv: process.argv.slice(2)
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 75
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        rc = 0;
        if (typeof err !== "undefined" && err !== null) {
          rc = -2;
          console.error(err.toString().red);
        }
        return process.exit(rc);
      };
    })(this));
  };

}).call(this);
