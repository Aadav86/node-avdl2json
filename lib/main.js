// Generated by IcedCoffeeScript 108.0.9
(function() {
  var FileRunner, Main, Parser, Stack, astmod, colors, fs, iced, make_esc, minimist, parse, usage, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  Parser = require('./parser').Parser;

  minimist = require('minimist');

  make_esc = require('iced-error').make_esc;

  colors = require('colors');

  astmod = require('./ast');

  usage = function() {
    return console.error("usage: avd2ljson -i <infile> -o <outfile>");
  };

  Stack = (function() {
    function Stack(d) {
      this.d = d;
      this.d || (this.d = {});
    }

    Stack.prototype.push = function(nm) {
      var k, ret, v, _ref;
      ret = {};
      _ref = this.d;
      for (k in _ref) {
        v = _ref[k];
        ret[k] = v;
      }
      ret[nm] = true;
      return new Stack(ret);
    };

    Stack.prototype.lookup = function(nm) {
      return this.d[nm];
    };

    return Stack;

  })();

  FileRunner = (function() {
    function FileRunner(_arg) {
      this.infile = _arg.infile, this.stack = _arg.stack;
      this.stack || (this.stack = new Stack);
    }

    FileRunner.prototype.open_infile = function(opts, cb) {
      var dat, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "open_infile");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
            funcname: "FileRunner.open_infile"
          });
          fs.readFile(_this.infile, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return dat = arguments[0];
              };
            })(),
            lineno: 39
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, dat.toString('utf8'));
        };
      })(this));
    };

    FileRunner.prototype.parse = function(_arg, cb) {
      var ast, dat, e, err, parser;
      dat = _arg.dat;
      parser = new Parser();
      parser.yy = astmod;
      ast = null;
      try {
        ast = parser.parse(dat);
      } catch (_error) {
        e = _error;
        err = new Error("Parse error in: " + this.infile + ": " + e.message);
      }
      return cb(err, ast);
    };

    FileRunner.prototype.recurse = function(_arg, cb) {
      var ast, err, esc, i, nm, p, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ast = _arg.ast;
      esc = make_esc(cb, "recurse");
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = ast.get_imports();
          _len = _ref.length;
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _len)) {
              return _break();
            } else {
              i = _ref[_i];
              (function(__iced_k) {
                if (_this.stack.lookup((nm = i.get_path().eval_to_string()))) {
                  err = new Error("import cycle found with '" + nm + "'");
                  (function(__iced_k) {
_break()
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                p = new FileRunner({
                  infile: nm,
                  stack: _this.stack.push(nm)
                });
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
                    funcname: "FileRunner.recurse"
                  });
                  p.run({}, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return ast = arguments[0];
                      };
                    })(),
                    lineno: 64
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return _next(i.set_protocol(ast));
                });
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    FileRunner.prototype.run = function(opts, cb) {
      var ast, dat, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
            funcname: "FileRunner.run"
          });
          _this.open_infile({}, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return dat = arguments[0];
              };
            })(),
            lineno: 72
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
              funcname: "FileRunner.run"
            });
            _this.parse({
              dat: dat
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return ast = arguments[0];
                };
              })(),
              lineno: 73
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
                funcname: "FileRunner.run"
              });
              _this.recurse({
                ast: ast
              }, esc(__iced_deferrals.defer({
                lineno: 74
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, ast);
            });
          });
        };
      })(this));
    };

    return FileRunner;

  })();

  parse = function(_arg, cb) {
    var ast, err, infile, p, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    infile = _arg.infile;
    p = new FileRunner({
      infile: infile
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced"
        });
        p.run({}, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return ast = arguments[1];
            };
          })(),
          lineno: 81
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err, ast);
      };
    })(this));
  };

  Main = (function() {
    function Main() {}

    Main.prototype.parse_argv = function(_arg, cb) {
      var argv, err;
      argv = _arg.argv;
      argv = minimist(argv);
      if (argv.h) {
        usage();
        err = new Error("usage: shown!");
      } else {
        this.outfile = argv.o;
        this.infile = argv.i;
        if (!((this.outfile != null) && (this.infile != null))) {
          err = new Error("need an [-i <infile>] and a [-o <outfile>]");
        }
      }
      return cb(err);
    };

    Main.prototype.output = function(_arg, cb) {
      var ast;
      ast = _arg.ast;
      console.log(JSON.stringify(ast.to_json()));
      return cb(null);
    };

    Main.prototype.main = function(_arg, cb) {
      var argv, ast, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      argv = _arg.argv;
      esc = make_esc(cb, "main");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
            funcname: "Main.main"
          });
          _this.parse_argv({
            argv: argv
          }, esc(__iced_deferrals.defer({
            lineno: 116
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
              funcname: "Main.main"
            });
            parse({
              infile: _this.infile
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return ast = arguments[0];
                };
              })(),
              lineno: 117
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
                funcname: "Main.main"
              });
              _this.output({
                ast: ast
              }, esc(__iced_deferrals.defer({
                lineno: 118
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    return Main;

  })();

  exports.main = function() {
    var err, main, rc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    main = new Main;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/node-avdl2json/src/main.iced",
          funcname: "main"
        });
        main.main({
          argv: process.argv.slice(2)
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 125
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        rc = 0;
        if (typeof err !== "undefined" && err !== null) {
          rc = -2;
          console.error(err.toString().red);
        }
        return process.exit(rc);
      };
    })(this));
  };

}).call(this);
