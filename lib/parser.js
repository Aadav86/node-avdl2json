/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,8],$V2=[13,18,24,27,34,35,36,37,38,50,53],$V3=[1,17],$V4=[1,18],$V5=[1,20],$V6=[10,13,18,24,27,34,35,36,37,38,50,53],$V7=[8,13,18,24,27,34,35,36,37,38,50,53,55,61],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,32],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[8,18,26,52],$Vg=[1,48],$Vh=[1,49],$Vi=[1,58],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,67],$Vn=[16,26,31,40,43,44,45,49,64,66],$Vo=[2,61],$Vp=[16,26,40,43,44,45,49,64,66],$Vq=[8,18,34,35,36,37,38,50,53],$Vr=[8,26],$Vs=[1,86],$Vt=[40,43,44,45,49,64,66],$Vu=[16,26];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Protocol":4,"ProtocolName":5,"LBRACE":6,"Statements":7,"RBRACE":8,"Decorators":9,"PROTOCOL":10,"Identifier":11,"Decorator":12,"AT_SIGN":13,"LPAREN":14,"Expr":15,"RPAREN":16,"Statement":17,"IDENTIFIER":18,"Enum":19,"Record":20,"Message":21,"Import":22,"Fixed":23,"ENUM":24,"EnumFields":25,"COMMA":26,"RECORD":27,"Fields":28,"Field":29,"Type":30,"SEMICOLON":31,"ArrayType":32,"Union":33,"STRING":34,"INT":35,"BOOLEAN":36,"LONG":37,"VOID":38,"TypeOrNull":39,"NULL":40,"Value":41,"String":42,"NUMBER":43,"TRUE":44,"FALSE":45,"ArrayValue":46,"LBRACKET":47,"Values":48,"RBRACKET":49,"ARRAY":50,"LANGLE":51,"RANGLE":52,"UNION":53,"TypeOrNullList":54,"IMPORT":55,"ParamsOpt":56,"Params":57,"Param":58,"ParamDefault":59,"EQUALS":60,"FIXED":61,"String1":62,"String2":63,"QUOTE1":64,"StringFrags":65,"QUOTE2":66,"StringFrag":67,"STRING_FRAG":68,"$accept":0,"$end":1},
terminals_: {2:"error",6:"LBRACE",8:"RBRACE",10:"PROTOCOL",13:"AT_SIGN",14:"LPAREN",16:"RPAREN",18:"IDENTIFIER",24:"ENUM",26:"COMMA",27:"RECORD",31:"SEMICOLON",34:"STRING",35:"INT",36:"BOOLEAN",37:"LONG",38:"VOID",40:"NULL",43:"NUMBER",44:"TRUE",45:"FALSE",47:"LBRACKET",49:"RBRACKET",50:"ARRAY",51:"LANGLE",52:"RANGLE",53:"UNION",55:"IMPORT",60:"EQUALS",61:"FIXED",64:"QUOTE1",66:"QUOTE2",68:"STRING_FRAG"},
productions_: [0,[3,1],[4,4],[5,3],[9,0],[9,2],[12,5],[7,1],[7,2],[11,1],[17,1],[17,1],[17,1],[17,1],[17,1],[19,6],[25,1],[25,3],[20,6],[28,0],[28,2],[29,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[39,1],[39,1],[41,1],[41,1],[41,1],[41,1],[41,1],[46,3],[48,1],[48,2],[32,4],[33,4],[54,1],[54,3],[22,4],[21,7],[56,0],[56,1],[57,1],[57,3],[58,3],[59,0],[59,2],[15,1],[15,1],[23,6],[42,1],[42,1],[62,3],[63,3],[67,1],[65,0],[65,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

  return $$[$0];
    
break;
case 2:
 this.$ = new yy.Protocol({ start : _$[$0-3], label : $$[$0-3], statements : $$[$0-1]}); 
break;
case 3:
 this.$ = new yy.ProtocolName({ start: _$[$0-2], name : $$[$0-1], decorators : $$[$0-2] }); 
break;
case 4:
 this.$ = []; 
break;
case 5:
 this.$ = $$[$0-1].concat($$[$0-1]) 
break;
case 6:
 this.$ = new yy.Decorator({ start: _$[$0-3], label : $$[$0-3], args : $$[$0-1] }); 
break;
case 7: case 38:
 this.$ = [$$[$0]]; 
break;
case 8: case 20: case 39:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 9:
 this.$ = new yy.Identifier({start: _$[$0], name : $$[$0] }); 
break;
case 15:
 this.$ = new yy.Enum({ start: _$[$0-5], decorators : $$[$0-5], name : $$[$0-3], constants : $$[$0-1] }); 
break;
case 16: case 19: case 42: case 48:
 this.$ = [ $$[$0] ]; 
break;
case 17:
 this.$ = $$[$0-2].concat($$[$0-1]) 
break;
case 18:
 this.$ = new yy.Record({ start: _$[$0-5], decorators : $$[$0-5], name : $$[$0-3], fields : $$[$0-1] }); 
break;
case 21:
 this.$ = new yy.Field({ start: _$[$0-2], type : $$[$0-2], name : $$[$0-1] }); 
break;
case 24:
 this.$ = new yy.Type({start: _$[$0], string: true     }); 
break;
case 25:
 this.$ = new yy.Type({start: _$[$0], int: true        }); 
break;
case 26:
 this.$ = new yy.Type({start: _$[$0], bool: true       }); 
break;
case 27:
 this.$ = new yy.Type({start: _$[$0], long: true       }); 
break;
case 28:
 this.$ = new yy.Type({start: _$[$0], custom: $$[$0]       }); 
break;
case 29:
 this.$ = new yy.Type({start: _$[$0], void_type: true  }); 
break;
case 31:
 new yy.Type({ start: _$[$0], null_type : true }); 
break;
case 33:
 this.$ = new yy.Value({start: _$[$0], int: yytext      }); 
break;
case 34:
 this.$ = new yy.Value({start: _$[$0], bool: true       }); 
break;
case 35:
 this.$ = new yy.Value({start: _$[$0], bool: false      }); 
break;
case 36:
 this.$ = new yy.Value({start: _$[$0], null_value: true }); 
break;
case 37:
 this.$ = $$[$0-1]; 
break;
case 40:
 this.$ = new yy.ArrayType({ start: _$[$0-3], type : $$[$0-1] }); 
break;
case 41:
 this.$ = new yy.Union({ start: _$[$0-3], types : $$[$0-1] }); 
break;
case 43: case 49:
 this.$ = $$[$0-2].concat($$[$0-1]); 
break;
case 44:
 this.$ = new yy.Import({ start: _$[$0-3], type : $$[$0-2], path : $$[$0-1] }); 
break;
case 45:
 this.$ = new yy.Message({ start: _$[$0-6], decorators : $$[$0-6], return_type : $$[$0-5], name : $$[$0-4], params : $$[$0-2] }); 
break;
case 46:
 this.$ = [] 
break;
case 50:
 this.$ = new yy.Param({ start: _$[$0-2], type : $$[$0-2], name : $$[$0-1], def : $$[$0] }); 
break;
case 51:
 this.$ = null; 
break;
case 52:
 return new yy.Value({start: _$[$0-1], value : $$[$0] }); 
break;
case 54:
 this.$ = new yy.ArrayValue({start: _$[$0], values : $$[$0] }); 
break;
case 55:
 this.$ = new yy.Fixed({ start: _$[$0-5], type : $$[$0-4], len : $$[$0-2] }); 
break;
case 56: case 57:
 this.$ = $$[$0]; 
break;
case 58:
 this.$ = new yy.String({start: _$[$0-2], end: _$[$0], val : "'" + $$[$0-1] + "'" }); 
break;
case 59:
 this.$ = new yy.String({start: _$[$0-2], end:_$[$0], val : '"' + $$[$0-1] + '"'}); 
break;
case 60:
 this.$ = yytext; 
break;
case 61:
 this.$ = ""; 
break;
case 62:
 this.$ = $$[$0-1] + $$[$0]; 
break;
}
},
table: [o([10,13],$V0,{3:1,4:2,5:3,9:4}),{1:[3]},{1:[2,1]},{6:[1,5]},{10:[1,6],12:7,13:$V1},o($V2,$V0,{7:9,17:10,19:11,20:12,21:13,22:14,23:15,9:16,55:$V3,61:$V4}),{11:19,18:$V5},o($V6,[2,5]),{11:21,18:$V5},o($V2,$V0,{19:11,20:12,21:13,22:14,23:15,9:16,17:23,8:[1,22],55:$V3,61:$V4}),o($V7,[2,7]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,13]),o($V7,[2,14]),{11:33,12:7,13:$V1,18:$V5,24:[1,24],27:[1,25],30:26,32:27,33:28,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,50:$Vd,53:$Ve},{11:37,18:$V5},{11:38,18:$V5},{6:[2,3]},o([6,8,14,16,18,26,31,52,60,64,66],[2,9]),{14:[1,39]},{1:[2,2]},o($V7,[2,8]),{11:40,18:$V5},{11:41,18:$V5},{11:42,18:$V5},o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),o($Vf,[2,25]),o($Vf,[2,26]),o($Vf,[2,27]),o($Vf,[2,28]),o($Vf,[2,29]),{51:[1,43]},{6:[1,44]},{42:45,62:46,63:47,64:$Vg,66:$Vh},{14:[1,50]},{15:51,40:$Vi,41:52,42:54,43:$Vj,44:$Vk,45:$Vl,46:53,47:[1,59],62:46,63:47,64:$Vg,66:$Vh},{6:[1,60]},{6:[1,61]},{14:[1,62]},{11:33,18:$V5,30:63,32:27,33:28,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,50:$Vd,53:$Ve},{11:33,18:$V5,30:66,32:27,33:28,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:65,40:$Vm,50:$Vd,53:$Ve,54:64},{31:[1,68]},o($Vn,[2,56]),o($Vn,[2,57]),o([64,68],$Vo,{65:69}),o([66,68],$Vo,{65:70}),{43:[1,71]},{16:[1,72]},{16:[2,53]},{16:[2,54]},o($Vp,[2,32]),o($Vp,[2,33]),o($Vp,[2,34]),o($Vp,[2,35]),o($Vp,[2,36]),{40:$Vi,41:74,42:54,43:$Vj,44:$Vk,45:$Vl,48:73,62:46,63:47,64:$Vg,66:$Vh},{11:76,18:$V5,25:75},o($Vq,[2,19],{28:77}),{11:33,16:[2,46],18:$V5,30:81,32:27,33:28,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,50:$Vd,53:$Ve,56:78,57:79,58:80},{52:[1,82]},{8:[1,83],26:[1,84]},o($Vr,[2,42]),o($Vr,[2,30]),o($Vr,[2,31]),o($V7,[2,44]),{64:[1,85],68:$Vs},{66:[1,87],68:$Vs},{16:[1,88]},o($V6,[2,6]),{40:$Vi,41:90,42:54,43:$Vj,44:$Vk,45:$Vl,49:[1,89],62:46,63:47,64:$Vg,66:$Vh},o($Vt,[2,38]),{8:[1,91],26:[1,92]},o($Vr,[2,16]),{8:[1,93],11:33,18:$V5,29:94,30:95,32:27,33:28,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,50:$Vd,53:$Ve},{16:[1,96]},{16:[2,47],26:[1,97]},o($Vu,[2,48]),{11:98,18:$V5},o($Vf,[2,40]),o($Vf,[2,41]),{11:33,18:$V5,30:66,32:27,33:28,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:99,40:$Vm,50:$Vd,53:$Ve},o($Vn,[2,58]),o([64,66,68],[2,62]),o($Vn,[2,59]),{31:[1,100]},{16:[2,37]},o($Vt,[2,39]),o($V7,[2,15]),{11:101,18:$V5},o($V7,[2,18]),o($Vq,[2,20]),{11:102,18:$V5},{31:[1,103]},{11:33,18:$V5,30:81,32:27,33:28,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,50:$Vd,53:$Ve,58:104},o($Vu,[2,51],{59:105,60:[1,106]}),o($Vr,[2,43]),o($V7,[2,55]),o($Vr,[2,17]),{31:[1,107]},o($V7,[2,45]),o($Vu,[2,49]),o($Vu,[2,50]),{40:$Vi,41:108,42:54,43:$Vj,44:$Vk,45:$Vl,62:46,63:47,64:$Vg,66:$Vh},o($Vq,[2,21]),o($Vu,[2,52])],
defaultActions: {2:[2,1],19:[2,3],22:[2,2],52:[2,53],53:[2,54],89:[2,37]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip over C++-style comments */
break;
case 1:/* skip space */
break;
case 2:return 27;
break;
case 3:return 53;
break;
case 4:return 24;
break;
case 5:return 50;
break;
case 6:return 10;
break;
case 7:return 61;
break;
case 8:return 34;
break;
case 9:return 35;
break;
case 10:return 55;
break;
case 11:return 37;
break;
case 12:return 34;
break;
case 13:return 36;
break;
case 14:return 38;
break;
case 15:return 40;
break;
case 16: return 18; 
break;
case 17:return 43; 
break;
case 18:return 6;
break;
case 19:return 8;
break;
case 20:return 14;
break;
case 21:return 16;
break;
case 22:return 47;
break;
case 23:return 49;
break;
case 24:return 51;
break;
case 25:return 52;
break;
case 26:return "SEMICOLON";
break;
case 27:return "COMMA";
break;
case 28:return 60;
break;
case 29:return 13;
break;
case 30: this.begin ('ST_QUOTE2'); return 66; 
break;
case 31: this.begin ('ST_QUOTE1'); return 64; 
break;
case 32: this.begin ('ST_COMMENT'); 
break;
case 33:return 'GENERIC';
break;
case 34:return 'GENERIC';
break;
case 35:return 68;
break;
case 36:return 68;
break;
case 37: this.popState (); return "QUOTE2"; 
break;
case 38:return 'EOF';
break;
case 39:return 'STRING_ATOM';
break;
case 40:return 'STRING_ATOM';
break;
case 41: this.popState (); return "QUOTE1"; 
break;
case 42:return 'EOF';
break;
case 43: this.popState(); 
break;
case 44:/* ignore */
break;
case 45:/* ignore */
break;
case 46:return 'EOF';
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\s+)/,/^(?:record\b)/,/^(?:union\b)/,/^(?:enum\b)/,/^(?:array\b)/,/^(?:protocol\b)/,/^(?:fixed\b)/,/^(?:string\b)/,/^(?:int\b)/,/^(?:import\b)/,/^(?:long\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:[-]?[0-9]*\.[0-9]+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:<)/,/^(?:>)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:@)/,/^(?:")/,/^(?:')/,/^(?:\/\*)/,/^(?:[^!.\/{}()\[\];,:"'\s]+)/,/^(?:.)/,/^(?:\\.)/,/^(?:[^\\"]+)/,/^(?:")/,/^(?:$)/,/^(?:\\.)/,/^(?:[^\\']+)/,/^(?:')/,/^(?:$)/,/^(?:\*\/)/,/^(?:\*)/,/^(?:[^*]+)/,/^(?:$)/],
conditions: {"ST_QUOTE2":{"rules":[35,36,37,38],"inclusive":true},"ST_QUOTE1":{"rules":[39,40,41,42],"inclusive":true},"ST_COMMENT":{"rules":[43,44,45,46],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}