/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,15],$V2=[1,16],$V3=[12,23,29,32,41,42,43,44,45,56,60,61,83],$V4=[2,75],$V5=[1,25],$V6=[1,26],$V7=[16,31,36,47,49,50,51,55,65,76,78],$V8=[2,72],$V9=[10,12,23,29,32,41,42,43,44,45,56,60,61,63,73,83],$Va=[1,41],$Vb=[1,42],$Vc=[1,43],$Vd=[1,44],$Ve=[1,45],$Vf=[1,46],$Vg=[1,48],$Vh=[1,47],$Vi=[12,23,29,32,41,42,43,44,45,56,60,61],$Vj=[1,56],$Vk=[10,23,31,58],$Vl=[10,23,31,58,59],$Vm=[1,77],$Vn=[10,23,41,42,43,44,45,56,60,61],$Vo=[10,31],$Vp=[16,31],$Vq=[1,115],$Vr=[1,112],$Vs=[1,113],$Vt=[1,114],$Vu=[16,31,47,49,50,51,55,76,78],$Vv=[47,49,50,51,55,76,78];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Protocol":4,"NamespaceOpt":5,"PROTOCOL":6,"Identifier":7,"LBRACE":8,"Statements":9,"RBRACE":10,"Namespace":11,"AT_SIGN":12,"NAMESPACE":13,"LPAREN":14,"String":15,"RPAREN":16,"Decorators":17,"Doc":18,"DecoratorList":19,"Decorator":20,"Expr":21,"Statement":22,"IDENTIFIER":23,"Enum":24,"Record":25,"Message":26,"Import":27,"Fixed":28,"ENUM":29,"EnumFields":30,"COMMA":31,"RECORD":32,"Fields":33,"Field":34,"Type":35,"SEMICOLON":36,"ArrayType":37,"Union":38,"MapType":39,"CustomType":40,"STRING":41,"INT":42,"BOOLEAN":43,"LONG":44,"VOID":45,"TypeOrNull":46,"NULL":47,"Value":48,"NUMBER":49,"TRUE":50,"FALSE":51,"ArrayValue":52,"LBRACKET":53,"Values":54,"RBRACKET":55,"ARRAY":56,"LANGLE":57,"RANGLE":58,"DOT":59,"MAP":60,"UNION":61,"TypeOrNullList":62,"IMPORT":63,"AsOpt":64,"AS":65,"ParamsOpt":66,"Oneway":67,"ONEWAY":68,"Params":69,"Param":70,"ParamDefault":71,"EQUALS":72,"FIXED":73,"String1":74,"String2":75,"QUOTE1":76,"StringFrags":77,"QUOTE2":78,"StringFrag":79,"STRING_FRAG":80,"DocRaw":81,"DocFrag":82,"DOC_FRAG":83,"$accept":0,"$end":1},
terminals_: {2:"error",6:"PROTOCOL",8:"LBRACE",10:"RBRACE",12:"AT_SIGN",13:"NAMESPACE",14:"LPAREN",16:"RPAREN",23:"IDENTIFIER",29:"ENUM",31:"COMMA",32:"RECORD",36:"SEMICOLON",41:"STRING",42:"INT",43:"BOOLEAN",44:"LONG",45:"VOID",47:"NULL",49:"NUMBER",50:"TRUE",51:"FALSE",53:"LBRACKET",55:"RBRACKET",56:"ARRAY",57:"LANGLE",58:"RANGLE",59:"DOT",60:"MAP",61:"UNION",63:"IMPORT",65:"AS",68:"ONEWAY",72:"EQUALS",73:"FIXED",76:"QUOTE1",78:"QUOTE2",80:"STRING_FRAG",83:"DOC_FRAG"},
productions_: [0,[3,1],[4,6],[11,5],[5,0],[5,1],[17,2],[19,0],[19,2],[20,5],[9,1],[9,2],[7,1],[22,1],[22,1],[22,1],[22,1],[22,1],[24,6],[30,1],[30,3],[25,6],[33,0],[33,2],[34,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[46,1],[46,1],[48,1],[48,1],[48,1],[48,1],[48,1],[52,3],[54,1],[54,2],[37,4],[40,1],[40,3],[39,4],[38,4],[62,1],[62,3],[27,5],[64,0],[64,2],[26,8],[67,0],[67,1],[66,0],[66,1],[69,1],[69,3],[70,3],[71,0],[71,2],[21,1],[21,1],[28,6],[15,1],[15,1],[74,3],[75,3],[79,1],[77,0],[77,2],[18,1],[81,0],[81,2],[82,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

  return $$[$0];
    
break;
case 2:
 this.$ = new yy.Protocol({ start : _$[$0-5], namespace : $$[$0-5], name : $$[$0-3], statements : $$[$0-1], }); 
break;
case 3:
 this.$ = $$[$0-1].eval_to_string() 
break;
case 4:
 this.$ = null 
break;
case 6:
 this.$ = new yy.Decorators({start : _$[$0-1], doc : $$[$0-1], decorator_list: $$[$0]}); 
break;
case 7: case 22:
 this.$ = []; 
break;
case 8:
this.$ = $$[$0-1].concat($$[$0]) 
break;
case 9:
 this.$ = new yy.Decorator({ start: _$[$0-3], label : $$[$0-3], args : $$[$0-1] }); 
break;
case 10: case 42:
 this.$ = [$$[$0]]; 
break;
case 11: case 23: case 43:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 12:
 this.$ = new yy.Identifier({start: _$[$0], name : $$[$0] }); 
break;
case 18:
 this.$ = new yy.Enum({ start: _$[$0-5], decorators : $$[$0-5], name : $$[$0-3], constants : $$[$0-1] }); 
break;
case 19: case 49: case 59:
 this.$ = [ $$[$0] ]; 
break;
case 20:
 this.$ = $$[$0-2].concat($$[$0]) 
break;
case 21:
 this.$ = new yy.Record({ start: _$[$0-5], decorators : $$[$0-5], name : $$[$0-3], fields : $$[$0-1] }); 
break;
case 24:
 this.$ = new yy.Field({ start: _$[$0-2], type : $$[$0-2], name : $$[$0-1] }); 
break;
case 28:
 this.$ = new yy.Type({start: _$[$0], custom: $$[$0]      }); 
break;
case 29:
 this.$ = new yy.Type({start: _$[$0], prim: 'string'  }); 
break;
case 30:
 this.$ = new yy.Type({start: _$[$0], prim: 'int'     }); 
break;
case 31:
 this.$ = new yy.Type({start: _$[$0], prim: 'boolean' }); 
break;
case 32:
 this.$ = new yy.Type({start: _$[$0], prim: 'long'    }); 
break;
case 33:
 this.$ = new yy.Type({start: _$[$0], void_type: true }); 
break;
case 35:
 this.$ = new yy.Type({ start: _$[$0], null_type : true }); 
break;
case 36:
 this.$ = new yy.Value({start: _$[$0], string: $$[$0]       }); 
break;
case 37:
 this.$ = new yy.Value({start: _$[$0], int: yytext      }); 
break;
case 38:
 this.$ = new yy.Value({start: _$[$0], bool: true       }); 
break;
case 39:
 this.$ = new yy.Value({start: _$[$0], bool: false      }); 
break;
case 40:
 this.$ = new yy.Value({start: _$[$0], null_value: true }); 
break;
case 41:
 this.$ = $$[$0-1]; 
break;
case 44:
 this.$ = new yy.ArrayType({ start: _$[$0-3], type : $$[$0-1] }); 
break;
case 45: case 53: case 63: case 67: case 68:
 this.$ = $$[$0]; 
break;
case 46:
 this.$.dot($$[$0]); 
break;
case 47:
 this.$ = new yy.MapType({ start: _$[$0-3], values : $$[$0-1] }); 
break;
case 48:
 this.$ = new yy.Union({ start: _$[$0-3], types : $$[$0-1] }); 
break;
case 50: case 60:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 51:
 this.$ = new yy.Import({ start: _$[$0-4], type : $$[$0-3], path : $$[$0-2], import_as: $$[$0-1] }); 
break;
case 52: case 62:
 this.$ = null; 
break;
case 54:
 this.$ = new yy.Message({ start: _$[$0-7], decorators : $$[$0-7], return_type : $$[$0-6], name : $$[$0-5], params : $$[$0-3], oneway : $$[$0-1] }); 
break;
case 55:
 this.$ = false; 
break;
case 56:
 this.$ = true 
break;
case 57:
 this.$ = [] 
break;
case 61:
 this.$ = new yy.Param({ start: _$[$0-2], type : $$[$0-2], name : $$[$0-1], def : $$[$0] }); 
break;
case 65:
 this.$ = new yy.ArrayValue({start: _$[$0], values : $$[$0] }); 
break;
case 66:
 this.$ = new yy.Fixed({ start: _$[$0-5], type : $$[$0-4], len : $$[$0-2] }); 
break;
case 69:
 this.$ = new yy.String({start: _$[$0-2], end: _$[$0], val : "'" + $$[$0-1] + "'" }); 
break;
case 70:
 this.$ = new yy.String({start: _$[$0-2], end:_$[$0], val : '"' + $$[$0-1] + '"'}); 
break;
case 71: case 77:
 this.$ = yytext; 
break;
case 72: case 75:
 this.$ = ""; 
break;
case 73: case 76:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 74:
 this.$ = new yy.Doc({start : _$[$0], raw: $$[$0] }); 
break;
}
},
table: [{3:1,4:2,5:3,6:[2,4],11:4,12:[1,5]},{1:[3]},{1:[2,1]},{6:[1,6]},{6:[2,5]},{13:[1,7]},{7:8,23:$V0},{14:[1,10]},{8:[1,11]},o([8,10,14,16,23,31,36,58,59,72,76,78],[2,12]),{15:12,74:13,75:14,76:$V1,78:$V2},o($V3,$V4,{9:17,22:18,24:19,25:20,26:21,27:22,28:23,17:24,18:27,81:28,63:$V5,73:$V6}),{16:[1,29]},o($V7,[2,67]),o($V7,[2,68]),o([76,80],$V8,{77:30}),o([78,80],$V8,{77:31}),o($V3,$V4,{24:19,25:20,26:21,27:22,28:23,17:24,18:27,81:28,22:33,10:[1,32],63:$V5,73:$V6}),o($V9,[2,10]),o($V9,[2,13]),o($V9,[2,14]),o($V9,[2,15]),o($V9,[2,16]),o($V9,[2,17]),{7:49,23:$V0,29:[1,34],32:[1,35],35:36,37:37,38:38,39:39,40:40,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,56:$Vf,60:$Vg,61:$Vh},{7:50,23:$V0},{7:51,23:$V0},o($Vi,[2,7],{19:52}),o($Vi,[2,74],{82:53,83:[1,54]}),{6:[2,3]},{76:[1,55],80:$Vj},{78:[1,57],80:$Vj},{1:[2,2]},o($V9,[2,11]),{7:58,23:$V0},{7:59,23:$V0},{7:60,23:$V0},o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),o($Vk,[2,28],{59:[1,61]}),o($Vk,[2,29]),o($Vk,[2,30]),o($Vk,[2,31]),o($Vk,[2,32]),o($Vk,[2,33]),{57:[1,62]},{8:[1,63]},{57:[1,64]},o($Vl,[2,45]),{15:65,74:13,75:14,76:$V1,78:$V2},{14:[1,66]},o([23,29,32,41,42,43,44,45,56,60,61],[2,6],{20:67,12:[1,68]}),o($V3,[2,76]),o($V3,[2,77]),o($V7,[2,69]),o([76,78,80],[2,73]),o($V7,[2,70]),{8:[1,69]},{8:[1,70]},{14:[1,71]},{7:72,23:$V0},{7:49,23:$V0,35:73,37:37,38:38,39:39,40:40,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,56:$Vf,60:$Vg,61:$Vh},{7:49,23:$V0,35:76,37:37,38:38,39:39,40:40,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:75,47:$Vm,56:$Vf,60:$Vg,61:$Vh,62:74},{7:49,23:$V0,35:78,37:37,38:38,39:39,40:40,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,56:$Vf,60:$Vg,61:$Vh},{36:[2,52],64:79,65:[1,80]},{49:[1,81]},o($Vi,[2,8]),{7:82,23:$V0},{7:84,23:$V0,30:83},o($Vn,[2,22],{33:85}),{7:49,16:[2,57],23:$V0,35:89,37:37,38:38,39:39,40:40,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,56:$Vf,60:$Vg,61:$Vh,66:86,69:87,70:88},o($Vl,[2,46]),{58:[1,90]},{10:[1,91],31:[1,92]},o($Vo,[2,49]),o($Vo,[2,34]),o($Vo,[2,35]),{58:[1,93]},{36:[1,94]},{7:95,23:$V0},{16:[1,96]},{14:[1,97]},{10:[1,98],31:[1,99]},o($Vo,[2,19]),{7:49,10:[1,100],23:$V0,34:101,35:102,37:37,38:38,39:39,40:40,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,56:$Vf,60:$Vg,61:$Vh},{16:[1,103]},{16:[2,58],31:[1,104]},o($Vp,[2,59]),{7:105,23:$V0},o($Vk,[2,44]),o($Vk,[2,48]),{7:49,23:$V0,35:76,37:37,38:38,39:39,40:40,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:106,47:$Vm,56:$Vf,60:$Vg,61:$Vh},o($Vk,[2,47]),o($V9,[2,51]),{36:[2,53]},{36:[1,107]},{15:111,21:108,47:$Vq,48:109,49:$Vr,50:$Vs,51:$Vt,52:110,53:[1,116],74:13,75:14,76:$V1,78:$V2},o($V9,[2,18]),{7:117,23:$V0},o($V9,[2,21]),o($Vn,[2,23]),{7:118,23:$V0},{36:[2,55],67:119,68:[1,120]},{7:49,23:$V0,35:89,37:37,38:38,39:39,40:40,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,56:$Vf,60:$Vg,61:$Vh,70:121},o($Vp,[2,62],{71:122,72:[1,123]}),o($Vo,[2,50]),o($V9,[2,66]),{16:[1,124]},{16:[2,64]},{16:[2,65]},o($Vu,[2,36]),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,39]),o($Vu,[2,40]),{15:111,47:$Vq,48:126,49:$Vr,50:$Vs,51:$Vt,54:125,74:13,75:14,76:$V1,78:$V2},o($Vo,[2,20]),{36:[1,127]},{36:[1,128]},{36:[2,56]},o($Vp,[2,60]),o($Vp,[2,61]),{15:111,47:$Vq,48:129,49:$Vr,50:$Vs,51:$Vt,74:13,75:14,76:$V1,78:$V2},o($Vi,[2,9]),{15:111,47:$Vq,48:131,49:$Vr,50:$Vs,51:$Vt,55:[1,130],74:13,75:14,76:$V1,78:$V2},o($Vv,[2,42]),o($Vn,[2,24]),o($V9,[2,54]),o($Vp,[2,63]),{16:[2,41]},o($Vv,[2,43])],
defaultActions: {2:[2,1],4:[2,5],29:[2,3],32:[2,2],95:[2,53],109:[2,64],110:[2,65],120:[2,56],130:[2,41]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip over C++-style comments */
break;
case 1:/* skip space */
break;
case 2:return 32;
break;
case 3:return 61;
break;
case 4:return 60;
break;
case 5:return 29;
break;
case 6:return 56;
break;
case 7:return 6;
break;
case 8:return 73;
break;
case 9:return 41;
break;
case 10:return 42;
break;
case 11:return 63;
break;
case 12:return 44;
break;
case 13:return 41;
break;
case 14:return 43;
break;
case 15:return 50;
break;
case 16:return 51;
break;
case 17:return 45;
break;
case 18:return 13;
break;
case 19:return 47;
break;
case 20:return 65;
break;
case 21:return 68;
break;
case 22: return 23; 
break;
case 23: return 49; 
break;
case 24:return 8;
break;
case 25:return 10;
break;
case 26:return 14;
break;
case 27:return 16;
break;
case 28:return 53;
break;
case 29:return 55;
break;
case 30:return 57;
break;
case 31:return 58;
break;
case 32:return "SEMICOLON";
break;
case 33:return "COMMA";
break;
case 34:return "DOT";
break;
case 35:return 72;
break;
case 36:return 12;
break;
case 37: this.begin ('ST_QUOTE2'); return 78; 
break;
case 38: this.begin ('ST_QUOTE1'); return 76; 
break;
case 39: this.begin ('ST_DOC'); 
break;
case 40: this.begin ('ST_COMMENT'); 
break;
case 41:return 'GENERIC';
break;
case 42:return 'GENERIC';
break;
case 43:return 80;
break;
case 44:return 80;
break;
case 45: this.popState (); return "QUOTE2"; 
break;
case 46:return 'EOF';
break;
case 47:return 80;
break;
case 48:return 80;
break;
case 49: this.popState (); return "QUOTE1"; 
break;
case 50:return 'EOF';
break;
case 51: this.popState(); 
break;
case 52:/* ignore */
break;
case 53:/* ignore */
break;
case 54:return 'EOF';
break;
case 55: this.popState(); 
break;
case 56: return 83; 
break;
case 57: return 83; 
break;
case 58:return 'EOF';
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\s+)/,/^(?:record\b)/,/^(?:union\b)/,/^(?:map\b)/,/^(?:enum\b)/,/^(?:array\b)/,/^(?:protocol\b)/,/^(?:fixed\b)/,/^(?:string\b)/,/^(?:int\b)/,/^(?:import\b)/,/^(?:long\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:void\b)/,/^(?:namespace\b)/,/^(?:null\b)/,/^(?:as\b)/,/^(?:oneway\b)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:[-]?[0-9]+)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:<)/,/^(?:>)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:@)/,/^(?:")/,/^(?:')/,/^(?:\/\*\*)/,/^(?:\/\*)/,/^(?:[^!.\/{}()\[\];,:"'\s]+)/,/^(?:.)/,/^(?:\\.)/,/^(?:[^\\"]+)/,/^(?:")/,/^(?:$)/,/^(?:\\.)/,/^(?:[^\\']+)/,/^(?:')/,/^(?:$)/,/^(?:\*\/)/,/^(?:\*)/,/^(?:[^*]+)/,/^(?:$)/,/^(?:\*\/)/,/^(?:\*)/,/^(?:[^*]+)/,/^(?:$)/],
conditions: {"ST_QUOTE2":{"rules":[43,44,45,46],"inclusive":true},"ST_QUOTE1":{"rules":[47,48,49,50],"inclusive":true},"ST_COMMENT":{"rules":[51,52,53,54],"inclusive":true},"ST_DOC":{"rules":[55,56,57,58],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}